unit uPSI_PyCommon;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility
    3 folded unit common, core , exceptions
}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_PyCommon = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TPyCommonCustomModule(CL: TPSPascalCompiler);
procedure SIRegister_TPyCommon(CL: TPSPascalCompiler);
procedure SIRegister_PyCommon(CL: TPSPascalCompiler);
procedure SIRegister_PyExceptions(CL: TPSPascalCompiler);


{ run-time registration functions }
procedure RIRegister_TPyCommonCustomModule(CL: TPSRuntimeClassImporter);
procedure RIRegister_TPyCommon(CL: TPSRuntimeClassImporter);
procedure RIRegister_PyCommon(CL: TPSRuntimeClassImporter);
procedure RIRegister_PyExceptions(CL: TPSRuntimeClassImporter);


procedure Register;

implementation


uses
   //PyEnvironment
  PythonEngine
  ,PyCommon, PyExceptions
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_PyCommon]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyCommonCustomModule(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TPyCommon', 'TPyCommonCustomModule') do
  with CL.AddClassN(CL.FindClass('TPyCommon'),'TPyCommonCustomModule') do  begin
     RegisterMethod('procedure ImportModule(const AModuleName, ASubModuleName: string)'); //overload;
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TPyCommon(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TPyCommon') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TPyCommon') do begin
     RegisterMethod('Procedure Free;');
    RegisterProperty('PyEnvironment', 'TPyEnvironment', iptrw);
    RegisterProperty('PythonEngine', 'TPythonEngine', iptrw);
  end;
end;

procedure SIRegister_PyExceptions(CL: TPSPascalCompiler);
begin
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyCommonException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EModuleNotReady');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EManagerUnavailable');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyPackageNotInstalled');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyModuleInstallError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyModuleUninstallError');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyParentModuleCircularReference');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyModuleNotImported');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPySubModuleNotFound');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyVarException');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPyVarIsNotPython');
  CL.AddClassN(CL.FindClass('TOBJECT'),'EPipExecCmdFailed');
  CL.AddClassN(CL.FindClass('TOBJECT'),'ECondaExecCmdFailed');
 CL.AddConstantN('ErrPackageNotInstalled','String').SetString( 'Package %s not installed.');
 CL.AddConstantN('ErrModuleNotImported','String').SetString( 'Module not imported.');
 CL.AddConstantN('ErrSubModuleNotFound','String').SetString( 'Submodule not found.');
 CL.AddConstantN('ErrCircularRefNotAllowed','String').SetString( 'Circular reference not allowed.');
 CL.AddConstantN('ErrVarIsNotPython','String').SetString( 'Variant is not a Python variant.');
end;



(*----------------------------------------------------------------------------*)
procedure SIRegister_PyCommon(CL: TPSPascalCompiler);
begin
  // from uPSI_PyCore.pas
  CL.AddTypeS('TPyModuleName', 'string');
  CL.AddTypeS('TPyPackageName', 'string');
  CL.AddTypeS('TPyPyPIPackageName', 'string');
  CL.AddTypeS('TPyExecCmdResultCode', 'integer');

  SIRegister_TPyCommon(CL);
  SIRegister_TPyCommonCustomModule(CL);
  SIRegister_PyExceptions(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
Procedure TPyCommonCustomModuleImportModule1_P(Self: TPyCommonCustomModule;  const AModuleName, ASubModuleName : string);
begin end;

(*----------------------------------------------------------------------------*)
Procedure TPyCommonCustomModuleImportModule_P(Self: TPyCommonCustomModule;  const AModuleName : string);
begin end;
(*----------------------------------------------------------------------------*)
procedure TPyCommonPythonEngine_W(Self: TPyCommon; const T: TPythonEngine);
begin Self.PythonEngine := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyCommonPythonEngine_R(Self: TPyCommon; var T: TPythonEngine);
begin T := Self.PythonEngine; end;
                      {
(*----------------------------------------------------------------------------*)
procedure TPyCommonPyEnvironment_W(Self: TPyCommon; const T: TPyEnvironment);
begin Self.PyEnvironment := T; end;

(*----------------------------------------------------------------------------*)
procedure TPyCommonPyEnvironment_R(Self: TPyCommon; var T: TPyEnvironment);
begin T := Self.PyEnvironment; end;      }

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyCommonCustomModule(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyCommonCustomModule) do begin
    RegisterMethod(@TPyCommonCustomModule.ImportModule, 'ImportModule');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TPyCommon(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TPyCommon) do begin
   RegisterMethod(@TPyCommon.Destroy, 'Free');
    //RegisterPropertyHelper(@TPyCommonPyEnvironment_R,@TPyCommonPyEnvironment_W,'PyEnvironment');
    RegisterPropertyHelper(@TPyCommonPythonEngine_R,@TPyCommonPythonEngine_W,'PythonEngine');
  end;
end;

procedure RIRegister_PyExceptions(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(EPyCommonException) do
  with CL.Add(EModuleNotReady) do
  with CL.Add(EManagerUnavailable) do
  with CL.Add(EPyPackageNotInstalled) do
  with CL.Add(EPyModuleInstallError) do
  with CL.Add(EPyModuleUninstallError) do
  with CL.Add(EPyParentModuleCircularReference) do
  with CL.Add(EPyModuleNotImported) do
  with CL.Add(EPySubModuleNotFound) do
  with CL.Add(EPyVarException) do
  with CL.Add(EPyVarIsNotPython) do
  with CL.Add(EPipExecCmdFailed) do
  with CL.Add(ECondaExecCmdFailed) do
end;


(*----------------------------------------------------------------------------*)
procedure RIRegister_PyCommon(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TPyCommon(CL);
  RIRegister_TPyCommonCustomModule(CL);
  RIRegister_PyExceptions(CL);
end;

 
 
{ TPSImport_PyCommon }
(*----------------------------------------------------------------------------*)
procedure TPSImport_PyCommon.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_PyCommon(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_PyCommon.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_PyCommon(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
